<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="bower_components/es6-promise/promise.min.js"></script>
    <script src="bower_components/sweetalert2/dist/sweetalert2.min.js"></script>
    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="sweetalert2.all.min.js"></script>
    <script src="sweetalert2.min.js"></script>
    <link rel="stylesheet" href="sweetalert2.min.css" />
    <script src="alert/dist/sweetalert-dev.js"></script>
    <link rel="stylesheet" href="alert/dist/sweetalert.css" />
    <script
      src="https://code.jquery.com/jquery-3.6.1.js"
      integrity="sha256-3zlB5s2uwoUzrXK3BT7AX3FyvojsraNFxCc2vC/7pNI="
      crossorigin="anonymous"
    ></script>
    <script src="https://use.fontawesome.com/releases/v6.2.1/js/all.js"></script>

    <script>
      $(document).ready(function () {
        calendarInit();
      });
      /*
    달력 렌더링 할 때 필요한 정보 목록 

    현재 월(초기값 : 현재 시간)
    금월 마지막일 날짜와 요일
    전월 마지막일 날짜와 요일
*/

      function calendarInit() {
        // 날짜 정보 가져오기
        var date = new Date(); // 현재 날짜(로컬 기준) 가져오기
        var utc = date.getTime() + date.getTimezoneOffset() * 60 * 1000; // uct 표준시 도출
        var kstGap = 9 * 60 * 60 * 1000; // 한국 kst 기준시간 더하기
        var today = new Date(utc + kstGap); // 한국 시간으로 date 객체 만들기(오늘)

        var thisMonth = new Date(
          today.getFullYear(),
          today.getMonth(),
          today.getDate()
        );
        // 달력에서 표기하는 날짜 객체

        var currentYear = thisMonth.getFullYear(); // 달력에서 표기하는 연
        var currentMonth = thisMonth.getMonth(); // 달력에서 표기하는 월
        var currentDate = thisMonth.getDate(); // 달력에서 표기하는 일

        // kst 기준 현재시간
        // console.log(thisMonth);

        // 캘린더 렌더링
        renderCalender(thisMonth);

        function renderCalender(thisMonth) {
          // 렌더링을 위한 데이터 정리
          currentYear = thisMonth.getFullYear();
          currentMonth = thisMonth.getMonth();
          currentDate = thisMonth.getDate();

          // 이전 달의 마지막 날 날짜와 요일 구하기
          var startDay = new Date(currentYear, currentMonth, 0);
          var prevDate = startDay.getDate();
          var prevDay = startDay.getDay();

          // 이번 달의 마지막날 날짜와 요일 구하기
          var endDay = new Date(currentYear, currentMonth + 1, 0);
          var nextDate = endDay.getDate();
          var nextDay = endDay.getDay();

          console.log(prevDate, prevDay, nextDate, nextDay);

          // 현재 월 표기
          $(".year-month").text(currentYear + "." + (currentMonth + 1));

          // 렌더링 html 요소 생성
          calendar = document.querySelector(".dates");
          calendar.innerHTML = "";

          // 지난달
          for (var i = prevDate - prevDay + 1; i <= prevDate; i++) {
            calendar.innerHTML =
              calendar.innerHTML +
              '<div class="day prev disable">' +
              i +
              "</div>";
          }
          // 이번달
          for (var i = 1; i <= nextDate; i++) {
            calendar.innerHTML =
              calendar.innerHTML + '<div class="day current">' + i + "</div>";
          }
          // 다음달
          for (var i = 1; i <= (7 - nextDay == 7 ? 0 : 7 - nextDay); i++) {
            calendar.innerHTML =
              calendar.innerHTML +
              '<div class="day next disable">' +
              i +
              "</div>";
          }

          // 오늘 날짜 표기
          if (today.getMonth() == currentMonth) {
            todayDate = today.getDate();
            var currentMonthDate = document.querySelectorAll(".dates .current");
            currentMonthDate[todayDate - 1].classList.add("today");
          }
        }

        // 이전달로 이동
        $(".go-prev").on("click", function () {
          thisMonth = new Date(currentYear, currentMonth - 1, 1);
          renderCalender(thisMonth);
        });

        // 다음달로 이동
        $(".go-next").on("click", function () {
          thisMonth = new Date(currentYear, currentMonth + 1, 1);
          renderCalender(thisMonth);
        });
      }
    </script>
    <style>
      /* section calendar */
      .sec_cal {
        width: 100%;
        font-family: "NotoSansR";
        background-color: #fffbeb;
        padding: 50px;
      }

      .sec_cal .cal_nav {
        font-family: "EF_Diary";
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: 400;
        font-size: 40px;
        line-height: 78px;
      }

      .sec_cal .cal_nav .year-month {
        width: 300px;
        text-align: center;
        line-height: 1;
        color: #2358e1;
      }

      .sec_cal .cal_nav .nav {
        display: flex;
        border: 1px solid #333333;
        border-radius: 5px;
      }

      .sec_cal .cal_nav .go-prev,
      .sec_cal .cal_nav .go-next {
        display: block;
        width: 30px;
        height: 58px;
        font-size: 0;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .sec_cal .cal_nav .go-prev::before,
      .sec_cal .cal_nav .go-next::before {
        content: "";
        display: block;
        width: 20px;
        height: 20px;
        border: 3px solid #000;
        border-width: 3px 3px 0 0;
        transition: border 0.1s;
      }

      .sec_cal .cal_nav .go-prev:hover::before,
      .sec_cal .cal_nav .go-next:hover::before {
        border-color: #ed2a61;
      }

      .sec_cal .cal_nav .go-prev::before {
        transform: rotate(-135deg);
      }

      .sec_cal .cal_nav .go-next::before {
        transform: rotate(45deg);
      }

      .sec_cal .cal_wrap {
        padding-top: 30px;
        position: relative;
        margin: 0 auto;
      }

      .sec_cal .cal_wrap .days {
        display: flex;
        margin-bottom: 20px;
        padding-bottom: 20px;
        border-bottom: 1px solid #ddd;
      }

      .sec_cal .cal_wrap::after {
        top: 368px;
      }

      .sec_cal .cal_wrap .day {
        display: flex;
        align-items: center;
        justify-content: center;
        width: calc(100% / 7);
        text-align: left;
        color: rgb(124, 123, 123);
        font-size: 20px;
        text-align: center;
        border-radius: 5px;
      }

      .current.today {
        background: rgb(255, 242, 205);
      }

      .sec_cal .cal_wrap .dates {
        display: flex;
        flex-flow: wrap;
        height: 350px;
      }

      .sec_cal .cal_wrap .day:nth-child(7n -1) {
        color: #1646cc;
      }

      .sec_cal .cal_wrap .day:nth-child(7n) {
        color: #bc214d;
      }

      .sec_cal .cal_wrap .day.disable {
        color: #ddd;
      }
      #wish {
        width: 200px;
        margin: 0px 10px 0px 0px;
        background-color: #fffbeb;
        align-items: center;
        flex-direction: column;
        display: flex;
        padding-top: 50px;
      }
      #main {
        width: 100%;
        padding: 5px;
        display: flex;
        background-color: #f3dc63;
        flex-direction: row;
        justify-content: space-around;
      }
      #wishlist {
        color: #2358e1;
        font-size: 30px;
      }
      h3 {
        margin-top: 50px;
        color: #2358e1;
      }
      #header {
        padding: 0px 20px 0px 20px;
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        align-items: center;
      }
      #title {
        color: #2358e1;
        font-size: 35px;
        font-family: "Comfortaa", cursive;
        margin-top: 20px;
      }
      #searchBox {
        width: 80%;
        height: fit-content;
        padding: 10px 20px 10px 20px;
        border-radius: 50px;
        border-color: #2358e1;
        border-width: 3px;
      }
      #search {
        justify-self: unset;
        width: 70%;
      }
      #searchBtn {
        background-color: #2358e1;
        width: 130px;
        height: 40px;
        border-radius: 5px;
        color: #f3dc63;
        font-size: 15px;
        border-color: #f3dc63;
      }
      #logout {
        background-color: #f3dc63;
        width: 130px;
        height: 40px;
        border-radius: 5px;
        color: #2358e1;
        font-size: 15px;
        border-color: #2358e1;
      }
      #user {
        justify-self: unset;
        align-self: center;
      }
      .img1 {
        padding-bottom: 30px;
        size: 15px;
        filter: drop-shadow(5px 5px 5px rgb(81, 81, 81));
      }
      .read {
        width: 95%;
        padding-bottom: 10px;
      }
      #reading {
        width: 1300px;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
      }
      .book {
        display: flex;
        flex-direction: column;
        width: 15%;
        align-items: center;
        padding: 20px;
        filter: drop-shadow(3px 3px 3px rgb(99, 99, 99));
      }
      .read-end {
        background-color: #5f8afa;
        border-width: 0px;
        color: #f3dc63;
        height: 30px;
        width: 80%;
      }
      .modal-overlay {
        display: none;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      .modal-window {
        background: rgba(69, 139, 197, 0.7);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.18);
        width: 200px;
        height: 100px;
        position: relative;
        top: -300px;
        padding: 10px;
      }
      .close-area {
        display: inline;
        float: right;
        padding-right: 10px;
        cursor: pointer;
        text-shadow: 1px 1px 2px gray;
        color: white;
      }
      .content {
        margin-top: 20px;
        padding: 0px 10px;
        text-shadow: 1px 1px 2px gray;
        color: white;
      }
      .choice-overlay {
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0;
        display: none;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      .choice-window {
        background: rgba(69, 139, 197, 0.7);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.18);
        width: 600px;
        position: relative;
        padding: 10px;
      }
      .close-area {
        display: inline;
        float: right;
        padding-right: 10px;
        cursor: pointer;
        text-shadow: 1px 1px 2px gray;
        color: white;
      }
      .choice-content {
        margin-top: 20px;
        padding: 0px 10px;
        text-shadow: 1px 1px 2px gray;
        color: white;
      }
      .review-overlay {
        width: 100%;
        height: 100%;
        position: absolute;
        left: 0;
        top: 0;
        display: none;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }
      .review-window {
        background: rgba(69, 139, 197, 0.7);
        box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
        border-radius: 10px;
        border: 1px solid rgba(255, 255, 255, 0.18);
        width: 600px;
        position: relative;
        padding: 10px;
      }
      .close-area {
        display: inline;
        float: right;
        padding-right: 10px;
        cursor: pointer;
        text-shadow: 1px 1px 2px gray;
        color: white;
      }
      #review-content {
        margin-top: 20px;
        padding: 0px 10px;
        text-shadow: 1px 1px 2px gray;
        color: white;
      }
      .swal-overlay {
        background-color: rgba(255, 251, 235, 0.4);
      }
      .swal-modal {
        background-color: #ffee95;
        border-radius: 30px;
        border: 2px solid white;
      }
      .swal-button {
        border-radius: 20px;
        background-color: #6590ff;
        font-size: 14px;
        border: 1px solid white;
      }
      .swal-title {
        margin: 0px;
        font-size: 16px;
        box-shadow: 0px 1px 1px rgba(0, 0, 0, 0.21);
        margin-bottom: 28px;
      }
      h1 {
        font-family: "EF_Diary";
        font-size: 40px;
      }
      .review-book {
        margin: 0px 10px 0px 0px;
      }
    </style>
  </head>
  <body>
    <div id="header">
      <h1 id="title">BOOKEA</h1>
      <div id="search">
        <a href="/?id=SearchPage"><button id="searchBtn">Search</button></a>
      </div>
      <div id="user">
        <a href="/?id=MyLibrary"><i class="fa-solid fa-book fa-2x"></i></a>
        <button id="logout">Log out</button>
      </div>
    </div>
    <div id="main">
      <div id="wish">
        <h1 id="wishlist">위시리스트</h1>
      </div>
      <div class="sec_cal">
        <div class="cal_nav">
          <a href="javascript:;" class="nav-btn go-prev">prev</a>
          <div class="year-month"></div>
          <a href="javascript:;" class="nav-btn go-next">next</a>
        </div>
        <div class="cal_wrap">
          <div class="days">
            <div class="day">MON</div>
            <div class="day">TUE</div>
            <div class="day">WED</div>
            <div class="day">THU</div>
            <div class="day">FRI</div>
            <div class="day">SAT</div>
            <div class="day">SUN</div>
          </div>
          <div class="dates"></div>
        </div>
        <h3>읽는 중</h3>
        <div id="reading"></div>
      </div>
    </div>
    <div class="review-overlay">
      <div class="review-window">
        <div class="close-area">X</div>
        <div id="review-content">
          <p>어떤 책을 읽으셨나요?</p>
        </div>
      </div>
    </div>

    <script>
      fetch("http://112.170.146.135:3100/userbooks/wish/2", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((res) => res.json())
        .then((obj) => {
          console.log(obj.res[0].thumnail);
          obj.res.forEach((res) => {
            let wishBox = document.getElementById("wish");

            let wishBooks = document.createElement("img");
            wishBooks.setAttribute("class", "img1");
            wishBooks.setAttribute("src", `${res.thumnail}`);
            wishBooks.setAttribute("onclick", `asking(${res.isbn})`);

            wishBox.appendChild(wishBooks);
          });
        })
        .catch((error) => console.log("error:", error));

      fetch("http://112.170.146.135:3100/userbooks/reading/2", {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
        },
      })
        .then((res) => res?.json())
        .then((obj) => {
          console.log(obj?.res[0].thumnail);
          obj.res.forEach((res) => {
            let readBox = document.getElementById("reading");

            let bookBox = document.createElement("div");
            bookBox.setAttribute("class", "book");
            let readingBooks = document.createElement("img");
            readingBooks.setAttribute("class", "read");
            readingBooks.setAttribute("src", `${res.thumnail}`);

            let endBtn = document.createElement("button");
            endBtn.setAttribute("class", "read-end");
            endBtn.setAttribute("onclick", `endAsk(${res.isbn})`);
            endBtn.innerText = "다 읽었어요";

            bookBox.appendChild(readingBooks);
            bookBox.appendChild(endBtn);

            readBox.appendChild(bookBox);

            let reviewBox = document.getElementById("review-content");
            let book = document.createElement("img");
            book.setAttribute("class", "review-book");
            book.setAttribute("src", `${res.thumnail}`);
            book.setAttribute("onclick", `answering(${res.isbn})`);

            reviewBox.appendChild(book);
          });
        })
        .catch((error) => console.log("error:", error));
    </script>

    <script type="text/javascript">
      function createDate() {
        var today = new Date();

        var year = today.getFullYear();
        var month = ("0" + (today.getMonth() + 1)).slice(-2);
        var day = ("0" + today.getDate()).slice(-2);

        var hours = ("0" + today.getHours()).slice(-2);
        var minutes = ("0" + today.getMinutes()).slice(-2);
        var seconds = ("0" + today.getSeconds()).slice(-2);

        var date =
          year +
          "-" +
          month +
          "-" +
          day +
          " " +
          hours +
          ":" +
          minutes +
          ":" +
          seconds;

        return date;
      }

      function asking(isbn) {
        Swal.fire({
          title: "이 책을 읽으시겠습니까?",
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: "네",
          denyButtonText: `위시리스트에서 삭제`,
          cancelButtonText: "아니오",
        }).then((result) => {
          if (result.isConfirmed) {
            var time = createDate();
            fetch("http://112.170.146.135:3100/userbooks", {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                isbn: isbn,
                idUser: 3,
                readStatus: 0,
                startTime: time,
              }),
            })
              .then((res) => res.json())
              .then((obj) => {
                console.log(obj);
              })
              .catch((error) => console.log("error:", error));
          } else if (result.isDenied) {
            fetch("http://112.170.146.135:3100/userbooks", {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                isbn: isbn,
                idUser: 3,
              }),
            })
              .then((res) => res.json())
              .then((obj) => {
                console.log(obj);
              })
              .catch((error) => console.log("error:", error));
          } else {
          }
        });
      }
      const answering = async (isbn) => {
        const { value: formValues } = await Swal.fire({
          title: "감상문",
          html:
            '<input id="swal-input1" class="swal2-input" type="number" min="1" placeholder="시작 페이지">' +
            '<input id="swal-input2" class="swal2-input" type="number" min="1" placeholder="끝 페이지">' +
            "<p>리뷰</p>" +
            '<textarea id="text-review" cols="56" rows="5"></textarea>' +
            "<p>인용문</p>" +
            '<textarea id="text-quote" cols="56" rows="2"></textarea>',
          focusConfirm: false,
          preConfirm: () => {
            return {
              isbn: isbn,
              idUser: 3,
              quote: document.getElementById("text-quote").value,
              content: document.getElementById("text-review").value,
              startPage: Number(document.getElementById("swal-input1").value),
              endPage: Number(document.getElementById("swal-input2").value),
              createdDate: createDate(),
            };
          },
        });

        if (formValues) {
          fetch("http://112.170.146.135:3100/reviews", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formValues),
          })
            .then((res) => res.json())
            .then((obj) => {
              console.log(obj);
            })
            .catch((error) => console.log("error:", error));
        }
      };

      function endAsk(isbn) {
        Swal.fire({
          title: "다 읽었나요?",
          showCancelButton: true,
          confirmButtonText: "네",
          cancelButtonText: "아니오",
        }).then((result) => {
          console.log(result);
          if (result.isConfirmed) {
            var time = createDate();
            fetch("http://112.170.146.135:3100/userbooks", {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                isbn: isbn,
                idUser: 3,
                readStatus: 1,
                endTime: time,
              }),
            })
              .then((res) => res.json())
              .then((obj) => {
                console.log(obj);
              })
              .catch((error) => console.log("error:", error));
          } else {
          }
        });
      }
    </script>

    <script>
      var modals = document.getElementsByClassName("choice-overlay");
      // Modal을 띄우는 클래스 이름을 가져옵니다.
      var btns = document.getElementsByClassName("dates");
      // Modal을 닫는 close 클래스를 가져옵니다.
      var spanes = document.getElementsByClassName("close-area");

      var book = document.getElementsByClassName("review-book");
      var funcs = [];

      // Modal을 띄우고 닫는 클릭 이벤트를 정의한 함수
      function Modal(num) {
        return function () {
          // 해당 클래스의 내용을 클릭하면 Modal을 띄웁니다.
          btns[num].onclick = function () {
            modals[num].style.display = "flex";
            console.log(num);
          };

          // <span> 태그(X 버튼)를 클릭하면 Modal이 닫습니다.
          spanes[num].onclick = function () {
            modals[num].style.display = "none";
          };

          book[num].onclick = function () {
            modals[num].style.display = "none";
            console.log("click");
          };
        };
      }

      // 원하는 Modal 수만큼 Modal 함수를 호출해서 funcs 함수에 정의합니다.
      for (var i = 0; i < btns.length; i++) {
        funcs[i] = Modal(i);
      }

      // 원하는 Modal 수만큼 funcs 함수를 호출합니다.
      for (var j = 0; j < btns.length; j++) {
        funcs[j]();
      }

      // Modal 영역 밖을 클릭하면 Modal을 닫습니다.
      window.onclick = function (event) {
        if (event.target.className == "choice-overlay") {
          event.target.style.display = "none";
        }
      };
    </script>
    <script>
      var modals = document.getElementsByClassName("review-overlay");
      // Modal을 띄우는 클래스 이름을 가져옵니다.
      var btns = document.getElementsByClassName("review-book");
      // Modal을 닫는 close 클래스를 가져옵니다.
      var spanes = document.getElementsByClassName("close-area");
      var funcs = [];

      // Modal을 띄우고 닫는 클릭 이벤트를 정의한 함수
      function Modal(num) {
        return function () {
          // 해당 클래스의 내용을 클릭하면 Modal을 띄웁니다.
          btns[num].onclick = function () {
            modals[num].style.display = "flex";
            console.log(num);
          };

          // <span> 태그(X 버튼)를 클릭하면 Modal이 닫습니다.
          spanes[num].onclick = function () {
            modals[num].style.display = "none";
          };
        };
      }

      // 원하는 Modal 수만큼 Modal 함수를 호출해서 funcs 함수에 정의합니다.
      for (var i = 0; i < btns.length; i++) {
        funcs[i] = Modal(i);
      }

      // 원하는 Modal 수만큼 funcs 함수를 호출합니다.
      for (var j = 0; j < btns.length; j++) {
        funcs[j]();
      }

      // Modal 영역 밖을 클릭하면 Modal을 닫습니다.
      window.onclick = function (event) {
        if (event.target.className == "review-overlay") {
          event.target.style.display = "none";
        }
      };
    </script>
  </body>
</html>
